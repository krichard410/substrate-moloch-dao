{"message":"unknown start of token: \\u{a0}","code":null,"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":529,"byte_end":531,"line_start":15,"line_end":15,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"  shares_amount: Balance,","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character ' ' (No-Break Space) looks like ' ' (Space), but it is not","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":529,"byte_end":531,"line_start":15,"line_end":15,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"  shares_amount: Balance,","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\u{a0}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs:15:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  shares_amount: Balance,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character ' ' (No-Break Space) looks like ' ' (Space), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  shares_amount: Balance,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\n\n"}
{"message":"unknown start of token: \\u{a0}","code":null,"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":531,"byte_end":533,"line_start":15,"line_end":15,"column_start":2,"column_end":3,"is_primary":true,"text":[{"text":"  shares_amount: Balance,","highlight_start":2,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character ' ' (No-Break Space) looks like ' ' (Space), but it is not","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":531,"byte_end":533,"line_start":15,"line_end":15,"column_start":2,"column_end":3,"is_primary":true,"text":[{"text":"  shares_amount: Balance,","highlight_start":2,"highlight_end":3}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\u{a0}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs:15:2\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  shares_amount: Balance,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character ' ' (No-Break Space) looks like ' ' (Space), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  shares_amount: Balance,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\n\n"}
{"message":"unknown start of token: \\u{a0}","code":null,"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":1231,"byte_end":1233,"line_start":40,"line_end":40,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"                shares_amount,","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character ' ' (No-Break Space) looks like ' ' (Space), but it is not","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":1231,"byte_end":1233,"line_start":40,"line_end":40,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"                shares_amount,","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\u{a0}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs:40:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                shares_amount,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character ' ' (No-Break Space) looks like ' ' (Space), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                shares_amount,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\n\n"}
{"message":"unknown start of token: \\u{a0}","code":null,"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":1233,"byte_end":1235,"line_start":40,"line_end":40,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"                shares_amount,","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character ' ' (No-Break Space) looks like ' ' (Space), but it is not","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":1233,"byte_end":1235,"line_start":40,"line_end":40,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"                shares_amount,","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\u{a0}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs:40:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                shares_amount,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character ' ' (No-Break Space) looks like ' ' (Space), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                shares_amount,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\n\n"}
{"message":"Missing weight for $ ident. Every dispatchable must have a #[weight] attribute.","code":null,"level":"error","spans":[{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":29597,"byte_end":29735,"line_start":865,"line_end":869,"column_start":3,"column_end":5,"is_primary":true,"text":[{"text":"\t\tcompile_error!(concat!(","highlight_start":3,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":26690,"byte_end":27179,"line_start":773,"line_end":789,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":13376,"byte_end":13881,"line_start":358,"line_end":372,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11698,"byte_end":12033,"line_start":288,"line_end":304,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":827,"byte_end":1458,"line_start":30,"line_end":49,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"decl_module! {","highlight_start":1,"highlight_end":15},{"text":"    pub struct Module<T: Trait> for enum Call where origin: T::Origin {","highlight_start":1,"highlight_end":72},{"text":"        // Declare public functions here","highlight_start":1,"highlight_end":41},{"text":"        fn deposit_event() = default;","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn create_proposal(origin, proposer: Hash, hash: T::Hash, balance: T::Balance) -> DispatchResult {","highlight_start":1,"highlight_end":107},{"text":"            let sender = ensure_signed(origin)?;","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let new_proposal = Proposal {","highlight_start":1,"highlight_end":42},{"text":"                proposer,","highlight_start":1,"highlight_end":26},{"text":"                shares_amount,","highlight_start":1,"highlight_end":31},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            <SubmittedProposal<T>>::insert(&sender, new_proposal);","highlight_start":1,"highlight_end":67},{"text":"            Self::deposit_event(RawEvent::Created(sender, new_proposal));","highlight_start":1,"highlight_end":74},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            Ok(())","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":1},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":1},{"text":"\t(","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":1},{"text":"\t(","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":1},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":1},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":1},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":1},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":1},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":1},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":1},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":1},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":1},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t[","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":1},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t)","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":1},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":1},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":1},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":1},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":1},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":1},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":1},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":1},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":1},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":1},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":1},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":1},{"text":"\t(@normalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":1},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":1},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":1},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":1},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":1},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":1},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":1},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":1},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":1},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":1},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":1},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":1},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":1},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":1},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":1},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":1},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":1},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":1},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":1},{"text":"\t\t)?","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":1},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":1},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":1},{"text":"\t\t///","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":1},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":1},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":1},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t>","highlight_start":1,"highlight_end":1},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":1},{"text":"\t) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":1},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":1},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":1},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":1},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":1},{"text":"\t\t///","highlight_start":1,"highlight_end":1},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":1},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":1},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":1},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":1},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":1},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":1},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":1},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":1},{"text":"\t\t{","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":1},{"text":"\t\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t\t}","highlight_start":1,"highlight_end":1},{"text":"\t}","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: Missing weight for $ ident. Every dispatchable must have a #[weight] attribute.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdecl_module! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Module<T: Trait> for enum Call where origin: T::Origin {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // Declare public functions here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn deposit_event() = default;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unresolved imports `frame_system`, `frame_system`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nPaths in `use` statements are relative to the crate root. To import items\nrelative to the current and parent modules, use the `self::` and `super::`\nprefixes, respectively. Also verify that you didn't misspell the import\nname and that the import exists in the module from where you tried to\nimport it. Example:\n\n```\nuse self::something::Foo; // ok!\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nOr, if you tried to use a module from an external crate, you may have missed\nthe `extern crate` declaration (which is usually placed in the crate root):\n\n```\nextern crate core; // Required to use the `core` crate\n\nuse core::any;\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":122,"byte_end":136,"line_start":3,"line_end":3,"column_start":20,"column_end":34,"is_primary":true,"text":[{"text":"use frame_system::{self as system, ensure_signed};","highlight_start":20,"highlight_end":34}],"label":"no `frame_system` external crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":107,"byte_end":119,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"use frame_system::{self as system, ensure_signed};","highlight_start":5,"highlight_end":17}],"label":"use of undeclared type or module `frame_system`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `frame_system`, `frame_system`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse frame_system::{self as system, ensure_signed};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `frame_system` external crate\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `frame_system`\u001b[0m\n\n"}
{"message":"cannot find derive macro `RuntimeDebug` in this scope","code":null,"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":459,"byte_end":471,"line_start":12,"line_end":12,"column_start":42,"column_end":54,"is_primary":true,"text":[{"text":"#[derive(Encode, Decode, Clone, Default, RuntimeDebug)]","highlight_start":42,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find derive macro `RuntimeDebug` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs:12:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Encode, Decode, Clone, Default, RuntimeDebug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `Module` in `moloch`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":8538,"byte_end":9228,"line_start":256,"line_end":272,"column_start":1,"column_end":3,"is_primary":true,"text":[{"text":"construct_runtime!(","highlight_start":1,"highlight_end":20},{"text":"\tpub enum Runtime where","highlight_start":1,"highlight_end":24},{"text":"\t\tBlock = Block,","highlight_start":1,"highlight_end":17},{"text":"\t\tNodeBlock = opaque::Block,","highlight_start":1,"highlight_end":29},{"text":"\t\tUncheckedExtrinsic = UncheckedExtrinsic","highlight_start":1,"highlight_end":42},{"text":"\t{","highlight_start":1,"highlight_end":3},{"text":"\t\tSystem: system::{Module, Call, Config, Storage, Event<T>},","highlight_start":1,"highlight_end":61},{"text":"\t\tRandomnessCollectiveFlip: randomness_collective_flip::{Module, Call, Storage},","highlight_start":1,"highlight_end":81},{"text":"\t\tTimestamp: timestamp::{Module, Call, Storage, Inherent},","highlight_start":1,"highlight_end":59},{"text":"\t\tAura: aura::{Module, Config<T>, Inherent(Timestamp)},","highlight_start":1,"highlight_end":56},{"text":"\t\tGrandpa: grandpa::{Module, Call, Storage, Config, Event},","highlight_start":1,"highlight_end":60},{"text":"\t\tBalances: balances::{Module, Call, Storage, Config<T>, Event<T>},","highlight_start":1,"highlight_end":68},{"text":"\t\tTransactionPayment: transaction_payment::{Module, Storage},","highlight_start":1,"highlight_end":62},{"text":"\t\tSudo: sudo::{Module, Call, Config<T>, Storage, Event<T>},","highlight_start":1,"highlight_end":60},{"text":"\t\tMoloch: moloch::{Module, Call, Storage},","highlight_start":1,"highlight_end":43},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":");","highlight_start":1,"highlight_end":3}],"label":"could not find `Module` in `moloch`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":8538,"byte_end":9228,"line_start":256,"line_end":272,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"construct_runtime!(","highlight_start":1,"highlight_end":20},{"text":"\tpub enum Runtime where","highlight_start":1,"highlight_end":24},{"text":"\t\tBlock = Block,","highlight_start":1,"highlight_end":17},{"text":"\t\tNodeBlock = opaque::Block,","highlight_start":1,"highlight_end":29},{"text":"\t\tUncheckedExtrinsic = UncheckedExtrinsic","highlight_start":1,"highlight_end":42},{"text":"\t{","highlight_start":1,"highlight_end":3},{"text":"\t\tSystem: system::{Module, Call, Config, Storage, Event<T>},","highlight_start":1,"highlight_end":61},{"text":"\t\tRandomnessCollectiveFlip: randomness_collective_flip::{Module, Call, Storage},","highlight_start":1,"highlight_end":81},{"text":"\t\tTimestamp: timestamp::{Module, Call, Storage, Inherent},","highlight_start":1,"highlight_end":59},{"text":"\t\tAura: aura::{Module, Config<T>, Inherent(Timestamp)},","highlight_start":1,"highlight_end":56},{"text":"\t\tGrandpa: grandpa::{Module, Call, Storage, Config, Event},","highlight_start":1,"highlight_end":60},{"text":"\t\tBalances: balances::{Module, Call, Storage, Config<T>, Event<T>},","highlight_start":1,"highlight_end":68},{"text":"\t\tTransactionPayment: transaction_payment::{Module, Storage},","highlight_start":1,"highlight_end":62},{"text":"\t\tSudo: sudo::{Module, Call, Config<T>, Storage, Event<T>},","highlight_start":1,"highlight_end":60},{"text":"\t\tMoloch: moloch::{Module, Call, Storage},","highlight_start":1,"highlight_end":43},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"construct_runtime!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/procedural/src/lib.rs","byte_start":12177,"byte_end":12285,"line_start":291,"line_end":293,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn construct_runtime(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":1},{"text":"\tconstruct_runtime::construct_runtime(input)","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `Module` in `moloch`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs:256:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mconstruct_runtime!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub enum Runtime where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Block = Block,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        NodeBlock = opaque::Block,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `Module` in `moloch`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot find type `Module` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":729,"byte_end":735,"line_start":25,"line_end":25,"column_start":21,"column_end":27,"is_primary":true,"text":[{"text":"    trait Store for Module<T: Trait> as MolochStorage {","highlight_start":21,"highlight_end":27}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":43,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{decl_storage, decl_module, decl_event};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use aura::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":43,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{decl_storage, decl_module, decl_event};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use balances::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":43,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{decl_storage, decl_module, decl_event};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use grandpa::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":43,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{decl_storage, decl_module, decl_event};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use randomness_collective_flip::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":43,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{decl_storage, decl_module, decl_event};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sudo::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":43,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{decl_storage, decl_module, decl_event};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use system::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":43,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{decl_storage, decl_module, decl_event};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use template::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":43,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{decl_storage, decl_module, decl_event};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use timestamp::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":43,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{decl_storage, decl_module, decl_event};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use transaction_payment::Module;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Module` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs:25:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    trait Store for Module<T: Trait> as MolochStorage {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse aura::Module;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse balances::Module;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse grandpa::Module;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse randomness_collective_flip::Module;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     and 5 other candidates\u001b[0m\n\n"}
{"message":"cannot find type `Module` in module `moloch`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":8538,"byte_end":9228,"line_start":256,"line_end":272,"column_start":1,"column_end":3,"is_primary":true,"text":[{"text":"construct_runtime!(","highlight_start":1,"highlight_end":20},{"text":"\tpub enum Runtime where","highlight_start":1,"highlight_end":24},{"text":"\t\tBlock = Block,","highlight_start":1,"highlight_end":17},{"text":"\t\tNodeBlock = opaque::Block,","highlight_start":1,"highlight_end":29},{"text":"\t\tUncheckedExtrinsic = UncheckedExtrinsic","highlight_start":1,"highlight_end":42},{"text":"\t{","highlight_start":1,"highlight_end":3},{"text":"\t\tSystem: system::{Module, Call, Config, Storage, Event<T>},","highlight_start":1,"highlight_end":61},{"text":"\t\tRandomnessCollectiveFlip: randomness_collective_flip::{Module, Call, Storage},","highlight_start":1,"highlight_end":81},{"text":"\t\tTimestamp: timestamp::{Module, Call, Storage, Inherent},","highlight_start":1,"highlight_end":59},{"text":"\t\tAura: aura::{Module, Config<T>, Inherent(Timestamp)},","highlight_start":1,"highlight_end":56},{"text":"\t\tGrandpa: grandpa::{Module, Call, Storage, Config, Event},","highlight_start":1,"highlight_end":60},{"text":"\t\tBalances: balances::{Module, Call, Storage, Config<T>, Event<T>},","highlight_start":1,"highlight_end":68},{"text":"\t\tTransactionPayment: transaction_payment::{Module, Storage},","highlight_start":1,"highlight_end":62},{"text":"\t\tSudo: sudo::{Module, Call, Config<T>, Storage, Event<T>},","highlight_start":1,"highlight_end":60},{"text":"\t\tMoloch: moloch::{Module, Call, Storage},","highlight_start":1,"highlight_end":43},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":");","highlight_start":1,"highlight_end":3}],"label":"not found in `moloch`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":8538,"byte_end":9228,"line_start":256,"line_end":272,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"construct_runtime!(","highlight_start":1,"highlight_end":20},{"text":"\tpub enum Runtime where","highlight_start":1,"highlight_end":24},{"text":"\t\tBlock = Block,","highlight_start":1,"highlight_end":17},{"text":"\t\tNodeBlock = opaque::Block,","highlight_start":1,"highlight_end":29},{"text":"\t\tUncheckedExtrinsic = UncheckedExtrinsic","highlight_start":1,"highlight_end":42},{"text":"\t{","highlight_start":1,"highlight_end":3},{"text":"\t\tSystem: system::{Module, Call, Config, Storage, Event<T>},","highlight_start":1,"highlight_end":61},{"text":"\t\tRandomnessCollectiveFlip: randomness_collective_flip::{Module, Call, Storage},","highlight_start":1,"highlight_end":81},{"text":"\t\tTimestamp: timestamp::{Module, Call, Storage, Inherent},","highlight_start":1,"highlight_end":59},{"text":"\t\tAura: aura::{Module, Config<T>, Inherent(Timestamp)},","highlight_start":1,"highlight_end":56},{"text":"\t\tGrandpa: grandpa::{Module, Call, Storage, Config, Event},","highlight_start":1,"highlight_end":60},{"text":"\t\tBalances: balances::{Module, Call, Storage, Config<T>, Event<T>},","highlight_start":1,"highlight_end":68},{"text":"\t\tTransactionPayment: transaction_payment::{Module, Storage},","highlight_start":1,"highlight_end":62},{"text":"\t\tSudo: sudo::{Module, Call, Config<T>, Storage, Event<T>},","highlight_start":1,"highlight_end":60},{"text":"\t\tMoloch: moloch::{Module, Call, Storage},","highlight_start":1,"highlight_end":43},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"construct_runtime!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/procedural/src/lib.rs","byte_start":12177,"byte_end":12285,"line_start":291,"line_end":293,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn construct_runtime(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62},{"text":"\tconstruct_runtime::construct_runtime(input)","highlight_start":1,"highlight_end":45},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":376,"byte_end":376,"line_start":11,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use aura::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":376,"byte_end":376,"line_start":11,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use balances::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":376,"byte_end":376,"line_start":11,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use grandpa::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":376,"byte_end":376,"line_start":11,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use randomness_collective_flip::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":376,"byte_end":376,"line_start":11,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sudo::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":376,"byte_end":376,"line_start":11,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use system::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":376,"byte_end":376,"line_start":11,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use template::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":376,"byte_end":376,"line_start":11,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use timestamp::Module;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs","byte_start":376,"byte_end":376,"line_start":11,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use transaction_payment::Module;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Module` in module `moloch`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/lib.rs:256:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mconstruct_runtime!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub enum Runtime where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Block = Block,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        NodeBlock = opaque::Block,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `moloch`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse aura::Module;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse balances::Module;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse grandpa::Module;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse randomness_collective_flip::Module;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m      and 5 other candidates\u001b[0m\n\n"}
{"message":"variant `create_proposal` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":656,"byte_end":671,"line_start":20,"line_end":20,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"        create_proposal(AccountId),","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_camel_case_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs","byte_start":656,"byte_end":671,"line_start":20,"line_end":20,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"        create_proposal(AccountId),","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":"CreateProposal","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `create_proposal` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/runtime/src/moloch.rs:20:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        create_proposal(AccountId),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `CreateProposal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_camel_case_types)]` on by default\u001b[0m\n\n"}
{"message":"aborting due to 10 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 10 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0412, E0432, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0412, E0432, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0412`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0412`.\u001b[0m\n"}
